#一、Python简介
##1.诞生
Python是Guido van Rossum在1989年圣诞期间，为打发无聊的假期而编写的一种编程语言。(说起来，Git也是Linus在圣诞假期写的。。)  
##2.Python适合的开发方向:  
1)网络应用，包括网站、后台服务等；  
2)日常小工具，例如系统管理员需要的脚本任务等；  
3)将其他语言开发的程序再包装起来，方便使用  
#二、安装Python
##1.安装
目前分为两个版本，Python 2.x和3.x，不同操作系统(mac，Windows，linux)安装方式有所不同，可自行百度具体安装方式。  
##2.Python解释器:  
###1)CPython
官方版本的解释器，在命令行下运行`python`或`python3`时启动的就是CPython解释器；  
###2)IPYthon
基于CPython之上的一个交互解释器，前者用`>>>`作为提示符，后者用`In [序号]`作为提示符。   
###3)PyPy
采用`JIT技术`，执行速度快，但和CPython有些不同，同样的代码可能执行结果有所不同；  
###4)Jython
运行在Java平台的Python解释器，可以直接把Python代码编译成Java字节码执行。  
###5)IronPython
和Jython类似，运行与微软.net平台，可直接将Python代码编译成.Net的字节码  
#三、Python基础
##输入和输出
输出:`print()`函数；  
输入:`input()`函数，可以让用户输入字符串。  

**注意**`input`返回的数据类型是`str`，如需得到数字，需要用`int()`函数或`float()`函数将其转换。  

##数据类型和变量
###整数
注意:Python的整数和浮点数大小都没有限制，但是超出一定的范围就直接表示为`inf`(无限大) 。  
###浮点数
对于很大或很小的浮点数，如1230000，可以用科学计数法写作:`1.23e6`或`12.3e5`.
###字符串
用单引号`'`或双引号`"`括起来的文本。  
**转义**:如果字符串中本身包括`"`这样的容易引起歧义的字符，则可以用转义字符`\`来标识。例如:
```
>>>'I\'m \"zhou\"!'
```
表示的为字符串`I'm "zhou"!`。  
转义字符还可以转义很多字符，如`\n`表示换行，`\t`表示制表符，`\\`表示字符`\`本身等等。  
如果字符中有许多字符需要转义，为了简化，Python允许使用`r''`表示`''`内部的字符串默认不转义，即原样打印出来。例如:
```
>>>print(r'\\\\\ff\ff\')
\\\\\ff\ff\
```
**多行文本**:如果字符串内部有很多换行，用`\n`写在一行里阅读不方便。鉴于此，Python允许使用`'''...'''`的格式表示多行内容，例如:
```
>>>print('''this is line1
...this is line2
...this is line3''')
this is line1
this is line2
this is line3
```
注意:上述程序是在命令行中执行的，若写成`.py`文件，则为:
```
print('''this is line1
this is line2
this is line3''')
```
PS:多行字符串`'''...'''`还可以在前面加上`r`使用。  
###布尔值
只有`True`和`False`两种值。  
逻辑运算:`and`、`or`和`not`  
布尔值常用于条件判断，如:  
```
if score>=60:
    print('pass')
else:
    print('fail')
```
###空值
Python中的一个特殊的值，用`None`表示。  
###变量
Python为动态语言，表现在其变量本身类型不固定，在定义变量时无需指定变量类型。  
###常量
在Python中，通常用全部大写的变量名表示常量:  
###运算符
**算术运算符**  

|运算符|描述|
|:---:|:---:|
|+|返回两数之和|
|-|返回两数之差，或得到一个负数|
|*|返回两数之积或得到一个被重复若干次的字符串|
|/|精确除法，计算结果为浮点数|
|//|地板除，返回商的整数部分|
|%|取余，返回除法的余数|
|\*\*|幂运算，如`x**y`返回x的y次幂|  

**比较运算符**

|运算符|描述|
|:---:|:---:|
|==|等于，比较对象是否相等|
|!=|不等于，比较对象是否不相等|
|<>|不等于，和!=类似|
|>|大于|
|<|小于|
|>=|大于等于|
|<=|小于等于|  

**逻辑运算符**

|运算符|逻辑表达式|描述|
|:---:|:---:|:---:|
|and|x and y|与|
|or|x or y|或|
|not|not x|非|

**Python成员运算符**

|运算符|描述|
|:---:|:---:|
|in|如果在指定序列中找到值返回True|
|not in|如果在指定序列中没有找到值返回True|

**Python身份运算符**

|运算符|描述|实例|
|:---:|:---:|:---:|
|is|判断两个标识符是不是引用自一个对象|`x is y`，类似与`id(x)==id(y)`，如果引用的是同一个对象则返回True，否则返回false|
|is not|判断两个标识符是不是引用自不同的对象|`x is not y`，相当于`id(x)!=id(y)`|

注:`id()`函数用于获取对象的内存地址。

##字符串和编码
###字符编码
**`ASCII`编码**:最早的编码，一个字节表示一个字符，只有127个字符，包括大小写英文字母、数字和一些符号。  

**`GB2312`编码**:中国制定的编码方式，在`ASCII`基础上，加入了中文编码(中文至少两个字节才能表示一个字符)。  

**`Unicode`编码**:将所有语言统一到了一套编码中，但最常用的是两个字节表示一个字符(若需要用到非常偏僻的字符，就需要4个字节)，故此种编码方式占用存储空间较大。  

**`UTF-8`编码**:为节省存储空间，将`Unicode`转化为了可变长度的`UTF-8`编码.它可以根据不同的数字大小编码成1-6个字节，常用的英文字母通常为1个字节，汉字通常为3个字节，生僻字符可能会被编码成4-6个字节。这样，如果传输文本中包含大量英文字符，则使用`UTF-8`可以节省空间。 
 
**注**:现有计算机系统通用的字符编码工作方式为:  
>在计算机内存中，同一使用`Unicode`编码，当需要保存到硬盘或者需要传输时，将其转换为`UTF-8`编码。  
###Python的字符串
在最新的Python3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言。  

**编码和字符的转换**:对于单个字符的编码，可以用`ord()`函数获取字符的整数表示，`chr()`函数把编码转换为对应的字符:  
```
>>> ord('A')
65
>>> chr('66')
'B'
```
如果知道字符的整数编码，还可以用十六进制写`str`:  
```
>>> ’\u4e2d\u6587‘
'中文'
```
这两种写法是等价的，其中`\uxxxx`表示值为16位十六进制xxxx的字符。(也可以用'\U'，表示32位十六进制xxxx的字符)  

**字符和字节的转换**:由于Python的字符串类型是`str`，在内存中以Unicode表示，一个字符对应若干个字节(`byte`)。如果要在网络上传输或是存储到磁盘，则需要把`str`转化为`bytes`。  
Python对`bytes`类型的数据用带`b`前缀的单引号(或双引号)表示:
```
x=b'ABC'
```
以Unicode表示的`str`可以通过`encode()`方法编码为指定的`bytes`，如:  
```
>>> 'ABC'.encode('ascii')
b'ABC'
>>> '中文'.encode('utf-8')
b'\xe4\xb8\xad\xe6\x96\x87'
```
注:纯英文的`str`可以用`ASCII`编码为`bytes`,内容是一样的；但含有中文的`str`无法用`ASCII`编码为`bytes`，可以用`UTF-8`编码。  
反过来，若从网络或磁盘读取了字节流，这些数据就是`bytes`，可以用`decode()`方法将其解码为`str`，例如:  
```
>>> b'ABC'.decode('ascii')
'ABC'
>>> b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
'中文'
```
如果`bytes`中包含无法解码的字节，`decode()`方法就会报错，若其中只有一小部分无效的字节，可以传入`errors='ignore'`忽略错误的字节，如:  
```
>>> b'\xe4\xb8\xad\xe6\x96\x87\xff'.decode('utf-8',errors='ignore')
'中文'
```
注:在操作字符串时，经常会遇到`str`和'bytes'互相转换的问题，为避免乱码，应当始终坚持使用`UTF-8`对二者进行转换。  

**计算字符数/字节数**:要计算`str`包含多少个字符或`bytes`包含多少个字节，可以利用`len`函数:  
```
>>> len(’中文‘)
2
>>> len('中文'.encode('utf-8'))
6
```
**格式化输出**
1) 在Python中，采用的格式化方式和C语言一致，用`%`实现，例如:  
```
>>> 'Hello, %s!' % 'Bart'
'Hello,Bart!'
>>> 'Hi, %s, your score is %d.'%('Lisa', 99)
'Hi, Lisa, your score is 99.'
```
常见的占位符有:  

|占位符|替换内容|
|:---:|:---:|
|%d   |整数  |
|%f   |浮点数|
|%s   |字符串|
|%x   |十六进制整数|

**注**:如果不确定应该用什么，都可以使用`%s`代替，它会将任何数据类型转换为字符串；  
如果要输出的字符串中有`%`,此时需要转义，用`%%`表示一个`%`；  
如果输出浮点数要保留3位小数，则使用`%.3f`来将其格式化。  

2) 另一种格式化字符串的方式是使用`format()`方法，它可以用传入的参数依次替换字符串内的占位符`{0}`、'{1}'......,不过这种方式比较麻烦。举例如下:  
```
>>> 'Hello, {}, 你的成绩是{1:.2f}'.format('Lisa'，99.00)
'Hello, Lisa, 你的成绩是99.0'
```
##使用list和tuple
###list
list是Python内置的一种数据类型，也成为列表。它是一种有序的集合，可以随时添加和删除其中的元素。  
例如，列出班级中所有同学的名字:  
```
>>> classmates = ['Michael', 'Bob', 'Tracy']
```
**获取元素个数**:上面的变量`classmates`就是一个list。可以用`len()`函数来获取list元素的个数:  
```
>>> len(classmates)
3
```
**索引**:可以用索引来访问list中每一个位置的元素，索引是从`[0]`开始的:  
```
>>> classmates[0]
'Micheal'
>>> classmate[2]
'Tracy'
```
当索引超出范围，Python会报错`IndexError`。所以，为确保索引不越界，记得最后一个元素的索引号是`len(classmates)-1`。  
若要取得最后一个元素，还可以用`-1`做索引:  
```
>>> classmate[-1]
'Tracy'
```
**添加元素**:list是一个可变的有序表，可以使用`.append()`方法追加元素至末尾:  
```
>>> classmates.append('Lisa')
>>> classmates
['Micheal', 'Bob', 'Tracy', 'Lisa']
```
也可以使用`.insert()`方法在指定位置插入元素，比如索引号为1的位置:  
```
>>> classmates.insert(1,‘Jean’)
>>> classmates
['Micheal', 'Jean', 'Bob', 'Tracy', 'Lisa']
```
**删除元素**:可以用`.pop()`方法删除末尾的元素:  
```
>>> classmate.pop()
'Lisa'
>>> classmates
['Micheal', 'Jean', 'Bob', 'Tracy']
```
用`.pop(i)`方法删除指定索引号`i`的元素:  
```
>>> classmate.pop(1)
'Jean'
>>> classmates
['Micheal', 'Bob', 'Tracy']
```
**元素替换**:如果要将某个元素替换成别的元素，可以直接赋值给对应的索引位置:  
```
>>> classmates[1] = 'Vale'
>>> classmates
['Micheal', 'Vale', 'Tracy']
```

**数据类型**:list中的元素的数据类型可以不同，比如:  
```
>>> student = ['Bart', 'boy', 8, True]
```
list中的元素也可以是另一个list，比如:  
```
>>> job = [student 'teacher' 'docotor' 'engineer']
>>> job
[['Bart', 'boy', 8, True] 'teacher' 'docotor' 'engineer']
>>> len(job)
4
```
如果要取得`'boy'`，可以写`student[1]`或`job[0][1]`,因此`job`可以视为一个二维数组。  

**注**:若list中一个元素也没有，就是一个空的list，长度为0.

###tuple
tuple是Python中的另一种有序列表，它和list非常类似，可以使用`[i]`来索引其中的元素。但不同点在于tuple一旦初始化后就不修改，它不存在`append()`、`insert()`和`pop()`方法，也不能通过赋值将某个元素替换成其他元素。例如:  
```
>>> t = (1,2,'number')
>>> t
(1, 2, number)
>>> t.pop()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'pop'
```
由于tuple不可变，故相对list来讲，使用tuple代码会更加安全。  

**定义tuple**:如果要定义一个空的tuple，可以写成:  
```
>>> t = ()
>>> t
()
```
但是，如果要定义一个只有一个元素的tuple，为避免和小括号歧义，Python规定，这种情况下必须加一个逗号`,`，来消除歧义:  
```
>>> t = (1,)
>>> t
(1,)
```
**"可变"的tuple**:tuple所谓的"不变"指的是，tuple的每个元素指向不变,利用这一规定，可以将tuple指向一个list，而这个list本身的元素是可变的，举例如下:  
```
>>> t = ('a', 'b', ['C', 'D'])
>>> t[2][0] = 'A'
>>> t[2][1] = 'B'
>>> t
('a', 'b', ['A', 'B'])
```
要注意，如果是间接赋值，tuple中的内容不会改变，举例如下:  
```
>>> l=['x','y']
>>> t=['a','b',l]
>>> l=['c','d']
>>> t
['a','b',['x','y']]
>>> t[2][0]='c'
>>> t
['a','b',['c','y']]
```
可见，通过索引改变list中的内容是单纯的内容修改，而指向的地址没有变化，故tuple中的内容改变了；而如果直接对list重新赋值，则是重新开辟一块内存空间，指向的地址发生了变化，但tuple指向的地址是不变的，依然是原来的地址，故tuple中的内容没有改变。  

##条件判断
Python中的条件判断是通过`if...elif...else...`语句来实现的。举例如下:  
```
age = int(input())
if age >= 18:
    print('adult')#语句1
else:
    print('minor')#语句2
```
如果`if`语句判断是`True`，就执行缩进的语句1，否则执行语句2。(可以省略`else`判断)注意，一定要加冒号`:`。  
还可以加上`elif`做更细致的判断，可以有多个`elif`，`if`语句的完整形式为:  
```
if <条件判断1>:
    <执行1>
elif <条件判断2>:
    <执行2>
elif <条件判断3>:
    <执行3>
...
else:
    <执行4>
```
'if'判断条件还可以简写，比如:  
```
if x:
    print('True')
```
以上语句中，只要`x`是非零数值、非空字符串、非空list等，就判断为`Ture`，否则为`False`。  

##循环
###for循环
Python的循环分为两种，一种是`for...in`循环，依次把list或tuple中的每个元素迭代出来，例如:  
```
names = ['Micheal', 'Lisa', 'Bob']
for name in names:
    print(name)
```
执行上述语句就是将`names`中的每个元素代入到变量`name`，然后执行缩进块中的语句。
**range()函数**:  
`range()`函数的原型为:`range(start, end[, step])`
参数含义为:  

- start:计数从start开始，若缺省，则默认为0；
- end:计数到end结束，但不包括end；
- step:步长，默认为1。  

注:`range()`函数返回的结果是一个整数序列对象，而非list。若想要得到list，可通过`list()`函数可以将其转化为list。如:  
```
>>> list(range(5))
[0, 1, 2, 3, 4]
```
整数序列也可以直接用来迭代，如:  
```
sum = 0
for x in range(101):
    sum = sum+x
print(sum)
```
###while循环
Python的第二种循环是while循环，只要条件满足，就不断循环，当条件不满足时退出循环。例如:  
```
sum = 0
n = 0
while n<=100:
    sum = sum+n
    n+=1
print(sum)
```
###break
在循环中，`break`语句可以提前退出循环。例如:  
```
L = [1,2,3,4]
for i in L:
    if i==3:
        break
    print(i)
```
打印出的结果为:  
```
1
2
3
```
###continue
在循环过程中，可以通过`continue`语句，跳过当前循环，直接开始下一次循环。例如:  
```
n = 0
while n<10:
    n=n+1
    if n%2==0:
        continue
    print(n)
```
执行以上的代码得到的结果为1,3,5,7,9  

**注**:不要滥用`break`和`continue`语句，它们容易造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到它们，上面两个例子，都可以通过修改循环条件或者修改循环逻辑去掉`break`和`continue`。

##使用dict和set
###dict
dict是Python内置的字典对象，在其他语言中也成为map，使用键-值(key-value)的格式存储，查找速度很快。  
**定义**:举例如下:  
```
>>> d = {'Bob':89, 'Lisa':99, 'Bart':30}
>>> d['Bob']
89
```
**放入数据**:除了初始化时指定外，还可以通过key放入，也可以通过此种方式改变数据或添加数据:  
```
>>> d['Homer']=12
>>> d
{'Bob':89, 'Lisa':99, 'Bart':30, 'Homer':12}
>>> d['Bob']=67
>>> d
{'Bob':67, 'Lisa':99, 'Bart':30, 'Homer':12}
```
可见，一个key只能对应一个value，所以若多次对一个key放入value，后面的值会冲掉前面的。  
**判断key是否存在**:  

- 1.通过`in`来判断  
```
>>> 'Tom' in d
False
```
- 2.通过dict提供的`get()`方法，如果key存在，则返回对应的value；如果key不存在，可以返回`None`或自己指定的value  
```
>>> d.get('Tom')
>>> d.get('Tom',-1)#第二个参数为key不存在时的指定返回值
-1

```
**注意**:dict内部存放顺序和key放入的顺序是没有关系的。  

**特点**:

- 和list相比，dict查找和插入速度极快，不会随着key的增加而变慢；但dict需要占用大量的内存，内存浪费多。  
- dict的key必须是**不可变对象**。在Python中，字符串、整数、tuple等都是不可变的，因此可以放心的作为key使用(注意，若tuple中含有list元素，则不可以作为key使用)。而list和dict是可变的，就不能作为key。  
- key不能重复。

###set
set和dict类似，也是一组key的集合，但不存储value。  
**定义**  
要创建一个set，需要提供一个list作为输入集合:  
```
>>> s = set([1,2,3])
>>> s
{1, 2, 3}
```
注意:虽然传入的参数是一个list，是有序的，但是生成的set中的元素是无序的，只是表面`s`中有1,2,3这三个元素而已。  
对于重复元素，在set中会被自动过滤:  
```
>>> s = set({1,1,2,2,3,3,3})
>>> s
{1, 2, 3}
```
**添加和删除元素**  

- 通过`add(key)`方法添加元素到set中，可重复添加，但不会有效果:  
```
>>> s.add(4)
>>> s
{1, 2, 3, 4}
```
- 通过`remove(key)`方法删除元素:  
```
>>> s.remove(2)
>>> s
{1, 3, 4}
```
**交集和并集**  
set可以看出数学上无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作:  
```
>>> s1 = set([1,2,3])
>>> s2 = set([2,3,4])
>>> s1 & s2
{2, 3}
>>> s1 | s2
{1, 2, 3, 4}
```
















